[{"id":0,"href":"/firmware/","title":"Firmware","section":"龙芯玩机指南","content":" 龙芯固件说明 # "},{"id":1,"href":"/menu/","title":"Index","section":"龙芯玩机指南","content":" content/content.zh/menu/index.md\u0026mdash; headless: true # 固件\n如何更新固件 Grub编译与调试 PMON的使用方法 从UEFI如何启动到系统 系统\n内核编译 生成系统下的一些文件 系统下查看一些信息 如何更新系统 应用\n3A6000上搭建hexo博客 3A6000上搭建gogs Qemu使用 龙芯lajtag常用技巧 "},{"id":2,"href":"/applications/gogs/","title":"3A6000上搭建gogs","section":"Applications","content":"pacman -S mariadb mysql_install_db --user=mysql --basedir=/usr --datadir=/var/lib/mysql systemctl start mysql mariadb --initialize-insecure --user=mysql --datadir=\u0026#39;./data\u0026#39; mysql -u root [root@mxd gitrepo]# mysql -u root mysql: Deprecated program name. It will be removed in a future release, use \u0026#39;/usr/bin/mariadb\u0026#39; instead Welcome to the MariaDB monitor. Commands end with ; or \\g. Your MariaDB connection id is 8 Server version: 11.0.2-MariaDB Arch Linux Copyright (c) 2000, 2018, Oracle, MariaDB Corporation Ab and others. Type \u0026#39;help;\u0026#39; or \u0026#39;\\h\u0026#39; for help. Type \u0026#39;\\c\u0026#39; to clear the current input statement. MariaDB [(none)]\u0026gt; create user \u0026#39;gogs\u0026#39;@\u0026#39;localhost\u0026#39; identified by \u0026#39;passwd\u0026#39;; Query OK, 0 rows affected (0.001 sec) MariaDB [(none)]\u0026gt; select user,host from mysql.user; +-------------+-----------+ | User | Host | +-------------+-----------+ | PUBLIC | | | | localhost | | gogs | localhost | | mariadb.sys | localhost | | mysql | localhost | | root | localhost | | | mxd | +-------------+-----------+ 7 rows in set (0.001 sec) MariaDB [(none)]\u0026gt; CREATE DATABASE gogs; Query OK, 1 row affected (0.000 sec) MariaDB [(none)]\u0026gt; show databases; +--------------------+ | Database | +--------------------+ | gogs | | information_schema | | mysql | | performance_schema | | sys | | test | +--------------------+ 6 rows in set (0.000 sec) MariaDB [(none)]\u0026gt; grant all privileges on gogs.* to \u0026#39;gogs\u0026#39;@\u0026#39;%\u0026#39; identified by \u0026#39;passwd\u0026#39; with grant option; Query OK, 0 rows affected (0.001 sec) build gogs:\npacman -S go node npm git clone --depth 1 https://github.com/gogs/gogs.git gogs cd gogs go build -o gogs ./gogs web "},{"id":3,"href":"/applications/blog/","title":"3A6000上搭建hexo博客","section":"Applications","content":"pacman -S nodejs npm git npm config set proxy=\u0026#34;http://127.0.0.1:7890\u0026#34; npm install -g hexo-cli mkdir loongsonwiki cd loongsonwiki hexo init git clone https://github.com/hdxw/hexo-theme-prowiki.git themes/hexo-theme-prowiki git submodule add https://github.com/hdxw/hexo-theme-prowiki.git themes/hexo-theme-prowiki vim _config.yml diff --git a/_config.yml b/_config.yml index 02b67a4..2391977 100644 --- a/_config.yml +++ b/_config.yml @@ -97,7 +97,7 @@ ignore: # Extensions ## Plugins: https://hexo.io/plugins/ ## Themes: https://hexo.io/themes/ -theme: landscape +theme: hexo-theme-prowiki # Deployment ## Docs: https://hexo.io/docs/one-command-deployment "},{"id":4,"href":"/firmware/grub/","title":"Grub编译与调试","section":"Firmware","content":" 1. Grub编译 # git clone https://github.com/loongarch64/grub.git cd grub ./bootstrap ./configure --with-platform=efi --target=loongarch64 --prefix=$(pwd) --disable-werror 2. Grub文件生成 # 2.1 grub.efi # ./grub-mkimage -p . -c /boot/mxd.cfg -d ./grub-core/ -O loongarch64-efi -o /boot/mxd.efi $(ls grub-core/ | grep -E \u0026#34;\\.mod$\u0026#34; | cut -d \u0026#34;.\u0026#34; -f 1 | uniq) 各参数可在help信息中查看.\n2.2 grub.cfg # ./grub-mkconfig -o /boot/mxd.cfg 除了生成grub.cfg外, 系统下还有一些用于参考的grub默认配置选项, 如: /etc/default/grub, /etc/grub.d等. 倘若修改这些文件, 还需要更新/boot/grub/grub.cfg, 有命令可以做到:\nupdate-grub 2.3 将grub安装至UEFI引导界面 # grub-install --boot-directory=/boot --efi-directory=/boot/efi --bootload-id=mxd /dev/sda --boot-directory指定在/boot作为根目录, 下寻找grub.cfg和模块.\n--efi-directory指定在/boot/efi下寻找grub的efi文件.\n--bootload-id指定生成的efi选项在UEFI下显示的名称.\n/dev/sda是安装grubloongarch64.efi的目标路径.\ngrub-install会调用grub-mkimage生成grub.efi文件, 同时会调用efibootmgr命令, 将grub.efi的路径通过UEFI运行时服务的接口写入到Flash中, 比如我这里举例是--bootload-id=mxd, 那在UEFI启动界面下将显示一个启动项, 名叫mxd, 指向/boot/efi/EFI/mxd/grubloongarch64.efi.\n3. GRUB界面 # 如图, GRUB界面下列出了几个选项, 其中第一项vm.mxd是我自己加的内核, 第二项Loongnix GNU/Linux是系统自带内核, 第三项Advanced options for Loongnix GNU/Linux是高级选项, 通常包含一些恢复模式的选项, 第四项是System Setup\u0026ndash;系统设置, 其实就是进入UEFI Setup界面.\n然后在界面的最下方:\nUse the ^ and v keys to select which entry is highlighted.\nPress enter to boot the selected OS, e to edit the commands before booting or c for a command-line.\n翻译一下:\n通过按上下键选择选项, 按执行进入选项, 按e去编辑选项, 按c进入GRUB的命令行.\n4. 编辑GRUB选项 # 通常我们通过UEFI执行GRUB的efi文件即可进入GRUB界面, 然后回车便可以启动内核, 但是倘若内核无法正常启动, 我们需要加串口调试, 就需要我们按e去编辑选项, 比如增加串口或者进入单用户模式等.\n按e后进入下图, 我们可以将光标通过上下左右按键, 移动至linux开头的那一行, 并在行末加入想要的参数比如串口console=ttyS0,115200 earlycon=uart,mmio,0x1fe001e0.\n可以看到, 界面最下面仍然有一些文字, 告诉我们按下Ctrl-X组合键或者F10可以直接启动, 按下Ctrl-c或F2进入到GRUB命令行, 按下ESC可以退回上一步.\n5. 手动找grub.cfg # 当我们在UEFI下执行GRUB的efi文件后, 加入grub.cfg的路径有问题, 则需要我们手动找到grub.cfg并且加载:\n逐个说明上述命令: 首先ls命令能够看到当前能够识别的设别, 其中hd0表示一块硬盘(Hard Disk0), 如果有多个硬盘将以hdx的形式显示.\n但是hd0并不具有文件系统, (hd0,msdos2)这种形式才表示有文件系统, msdos指MBR的分区格式, msdos2也就表示MBR硬盘上第二个分区.\n然后逐级用ls命令找到grub.cfg的路径:(hd0,msdos2)/boot/grub/grub.cfg.\n最后通过configfile命令, 解析grub.cfg文件, 即可重新回到GRUB的主界面.\n6. 没有grub.cfg的情况下引导内核 # 有时候, 我们会遇到有grub, 但是没有grub.cfg的情况, 这时, 我们可以稍微背下来两条命令, 这两条也就是grub.cfg中加载内核和加载initrd的命令: linux命令和initrd命令\nlinux命令后面加内核的路径, 以及内核启动参数\ninitrd命令后面加initrd的路径即可.\n然后执行boot即可启动. 如下图:\n7. Grub增加串口 # 7.1 使能串口 # grub\u0026gt; serial --unit=0 --speed=115200 或:\ngrub\u0026gt; serial --speed=115200 com0 --unit后指定com0到comN用作串口, 通常默认使用com0.\n但比如loongarch机器, 串口可能注册为了别的名字, 比如efi0, 所以真正执行的命令是:\ngrub\u0026gt; serial --speed=115200 efi0 7.2 使能串口输入 # 使能串口后, terminal_input和terminal_output命令分别查看可用的输入输出选项如下:\ngrub\u0026gt; terminal_input Active input terminals: console Available input terminals: serial_efi0 grub\u0026gt; grub\u0026gt; terminal_output Active output terminals: console gfxterm Available output terminals: serial_efi0 可见输入和输出选项中各自增加了一个可用选项:serial_efi0\n所以使用terminal_input和terminal_output命令分别设定可用的选项作为输入输出.\ngrub\u0026gt; terminal_input console serial_efi0 grub\u0026gt; terminal_output console gfxterm serial_efi0 串口下即可显示grub的一举一动了.\n8. Grub打开debug # grub\u0026gt; set pager=1 grub\u0026gt; set debug=all 打开后打印会从terminal_output中可用的选项中输出. 所以建议增加串口后使用, 否则屏幕不支持回翻也挺麻烦的.\n"},{"id":5,"href":"/firmware/pmon/","title":"PMON的使用方法","section":"Firmware","content":" 1. 查看设备 # PMON\u0026gt; devls syn0 wd0 usb0 sync0, igb0, em0 等字样,表示网络设备, 即网卡\nwd0, nvme0, usb0, cd0等字样表示存储设备, 即硬盘, U盘等.\n2. 查看pci信息 # PMON\u0026gt; pciscan \u0026gt;\u0026gt; BUS 0 \u0026lt;\u0026lt; Dev Fun Device description -------------------------- 0 0 vendor/product: 0x0014/0x7a00 (bridge, host, interface: 0x00, revision: 0x00) 0x00000000:0x00000000 mem @0x00000000, 0 bytes 0 1 vendor/product: 0x0014/0x7a10 (bridge, host, interface: 0x00, revision: 0x01) 0x00000000:0x00000000 mem @0x00000000, 0 bytes 0 2 vendor/product: 0x0014/0x7a20 (bridge, host, interface: 0x00, revision: 0x01) 0x00000000:0x00000000 mem @0x00000000, 0 bytes 0 3 vendor/product: 0x0014/0x7a30 (bridge, host, interface: 0x00, revision: 0x00) 0x00000000:0x00000000 mem @0x00000000, 0 bytes 4 0 vendor/product: 0x0014/0x7a24 (serialbus, USB, interface: 0x10, revision: 0x02) 64-bit mem,low address 0x59648004:0xffff8004 mem @0x59648000, 32768 bytes 0x00000000:0x00000000 mem @0x00000000, 0 bytes ...... ...... 3. 产看固件版本信息 # PMON\u0026gt; vers PMON: PMON 5.0.3-Release (loongson) #233: Wed Oct 18 15:09:40 CST 2023 commit d044be8f495e97082c8905b131d525ef31ade0b9 Author: Xiangdong Meng \u0026lt;mengxiangdong@loongson.cn\u0026gt; Date: Wed Sep 6 15:15:31 2023 +0800 4. 查看寄存器信息 # PMON\u0026gt; d8 0x800000001fe00020 2 800000001fe00020 : 0000303030364133 0000000000000000 3A6000.......... 5. 查看磁盘信息 # 这里fdisk命令后面的设备名是在第一节中devls命令列出来的.\nPMON支持GPT和MBR分区\nPMON暂不支持设备热插拔.\nMBR:\nPMON\u0026gt; fdisk usb0 Device Boot Start End Sectors Id System usb0a 2048 122880000 122877952 83 Linux GPT:\nPMON\u0026gt; fdisk usb0 Device Boot Start End Sectors Id System usb0a 2048 122877951 122875904 0FC63DAF Linux filesystem 6. 查看磁盘中的文件 # /dev/fs/后的字符是fdisk usb0命令中, Device一列中显示的内容.\nPMON只支持Fat, Ext2/3/4, ISO9660等分区\nPMON在查看文件时, 通常不用指定文件系统类型.\n比如加载一个fat分区的内容: load /dev/fs/usb0/和load /dev/fs/fat@usb0/的效果是一样的\nFat分区:\nPMON\u0026gt; load /dev/fs/usb0/ gz.mxd \u0026lt;FILE\u0026gt; 993222 boot.cfg \u0026lt;FILE\u0026gt; 403 vm.mxd \u0026lt;FILE\u0026gt; 95024056 /dev/fs/fat@usb0/: Is a directory ext2/ext3/ext4分区:\nPMON\u0026gt; load /dev/fs/usb1a/ |./ ../ lost+found/ gz.mxd boot.cfg /dev/fs/ext4@usb1a/: Undefined error: 0 7. 加载内核 # PMON\u0026gt; load /dev/fs/usb0a/vm.mxd \\Loading file: /dev/fs/fat@usb0a/vm.mxd (elf) (elf) 0x9000000000200000/20053784 + 0x151ff18/922672(z) + 31926 syms| Entry address is 00c01000 8. 加载initrd # PMON\u0026gt; initrd /dev/fs/usb0a/initrd.img-4.19.0-19-loongson-3 Loading initrd image /dev/fs/usb0a/initrd.img-4.19.0-19-loongson--dl_offset 9000000090000000 addr 9000000090000000 (bin) 9. 启动内核 # 必须要在加载内核之后执行:\nPMON\u0026gt; g console=ttyS0,115200 earlycon=uart,mmio,0x1fe001e0 root=/dev/sda3 Warning! NVRAM checksum fail. Reset! Reached finished_ap_limit=7 in a5 microseconds BootCore ID: 0 Collect AP: 7 Total Core: 8 ACPI: ACPI tables init. VBIOS crc check is wrong,use default setting! GMEM: Get vbios from ls3a spi done! Init acpi table OK! set coherent [ 0.000000] Linux version 4.19.190+ (mengxiangdong@5.5) (gcc version 8.3.0 (GCC)) #9 SMP Tue Oct 17 11:14:31 CST 2023 [ 0.000000] 64-bit Loongson Processor probed (LA664 Core) [ 0.000000] CPU0 revision is: 0014d000 (Loongson-64bit) [ 0.000000] FPU0 revision is: 00000001 [ 0.000000] efi: SMBIOS=0xfffe000 ACPI 2.0=0xfefe000 NEWMEM=0xb036800 [ 0.000000] earlycon: uart0 at MMIO 0x000000001fe001e0 (options \u0026#39;\u0026#39;) [ 0.000000] bootconsole [uart0] enabled [ 0.000000] ACPI: Early table checksum verification disabled [ 0.000000] ACPI: RSDP 0x000000000FEFE000 000024 (v02 LOONGS) ...... ...... 10. 加载引导文件 # UEFI通过找到grub.efi, 接着找到grub.cfg, 进而引导内核\n而PMON只需要找到boot.cfg文件即可. PMON默认会从/和/boot目录中找boot.cfg\n倘若没有找到, 可以手动加载:\nPMON\u0026gt; bl /dev/fs/fat@usb0a/boot.cfg ������������������������������������������������Ŀ � Boot Menu List � ������������������������������������������������Ĵ � -\u0026gt; 1 Loongnix 20 GNU/Linux 4.19.0-19-loongson-3� � � � � � � � � � � � � � � � � � Please Select Boot Menu [1] � �������������������������������������������������� Use the UP and DOWN keys to select the entry. Press ENTER to boot selected OS. Press \u0026#39;c\u0026#39; to command-line. Booting system in [2] second(s) 11. 查看文件 # PMON\u0026gt; devcp /dev/fs/fat@usb0a/boot.cfg /dev/tty0 default 0 timeout 3 showmenu 0 title Loongnix 20 GNU/Linux 4.19.0-19-loongson-3 kernel /dev/fs/fat@usb0a/vmlinuz-4.19.0-19-loongson-3 initrd /dev/fs/fat@usb0a/initrd.img-4.19.0-19-loongson-3 args root=/dev/sda3 console=ttyS0,115200 loglevel=8 12. 配置网络 # PMON\u0026gt; devls Device name Type syn0 IFNET usb0 DISK PMON\u0026gt; ifconfig syn0 192.168.1.13 synopGMAC_linux_open called Version = 0xd137 MacAddr = 0x3e 0xd0 0x62 0xf5 0x46 0x94 ===phy HALFDUPLEX MODE DMA status reg = 0x0 before cleared! DMA status reg = 0x0 after cleared! register poll interrupt: gmac 0 ==arp_ifinit done ===phy FULLDUPLEX MODE Link is with 1000M Speed PMON\u0026gt; 13. 加载网络文件 # PMON支持从网络加载内核, 支持的协议有http和tftp\nhttp:\nPMON\u0026gt; load http://192.168.1.4/vm.mxd \\Loading file: http://192.168.1.4/vm.mxd (elf) (elf) 0x9000000000200000/20053784 + 0x151ff18/922672(z) + 31926 syms| Entry address is 00c01000 tftp:\nPMON\u0026gt; load tftp://192.168.1.4/vm.mxd \\Loading file: tftp://192.168.1.4/vm.mxd (elf) (elf) 0x9000000000200000/20053784 + 0x151ff18/922672(z) + 31926 syms| Entry address is 00c01000 14. 更新固件 # PMON更新固件的命令为fload\n与加载内核类似, 可以从硬盘加载, 也可以从网络加载\n从硬盘加载:\nPMON\u0026gt; fload /dev/fs/usb0a/gz.mxd Loading file: /dev/fs/fat@usb0a/gz.mxd dl_offset 900000000f800000 addr 900000000f800000 (bin) - Loaded 993222 bytes Programming flash 900000000f800000:f27c6 into 800000001c000000 Erase end! -Programming end! 从tftp服务器加载:\nPMON\u0026gt; fload tftp://192.168.1.4/gz.mxd Loading file: tftp://192.168.1.4/gz.mxd dl_offset 900000000f800000 addr 900000000f800000 (bin) - Loaded 993222 bytes Programming flash 900000000f800000:f27c6 into 800000001c000000 Erase end! -Programming end! 从http服务器加载:\nPMON\u0026gt; fload http://192.168.1.4/gz.mxd Loading file: http://192.168.1.4/gz.mxd dl_offset 900000000f800000 addr 900000000f800000 (bin) - Loaded 993222 bytes Programming flash 900000000f800000:f27c6 into 800000001c000000 Erase end! -Programming end! "},{"id":6,"href":"/applications/qemu/","title":"Qemu使用","section":"Applications","content":"pacman -S qemu-system-loongarch64 wget https://github.com/loongson/Firmware/raw/main/LoongArchVirtMachine/edk2-loongarch64-code.fd -O edk2-loongarch64-code.fd qemu-system-loongarch64 -m 4G -smp 1 --cpu la464 --machine virt -bios edk2-loongarch64-code.fd --serial stdi "},{"id":7,"href":"/firmware/uefi/","title":"从UEFI如何启动到系统","section":"Firmware","content":" UEFI须知 # 1. 进入UEFI setup界面 # 在串口或者显示界面下显示BDS字样的时候(如下图), 稍微按按上下键即可进入Setup界面 2. Setup界面 # 无论是Intel还是loongson, BIOS下都有设置的接口, PMON也有, 无非是显示样式差异, 原理相通. Loongson的UEFI界面如下图\n不同的条目, 用于设置不同的功能. 其中普通用户通常只需要进入BootManager界面选择相应的启动目标即可. 3. BootManager界面 # 在下图区域1中为条目名称, 区域2中为UEFI下解析的路径名(有点专业,不用理解), 总之, 左边看不懂时就看右边, 找相关的关键字, 比如下图, 左侧是设备名, 不太能看出是什么设备, 右侧则有Sata字样可以识别. 4. Shell下操作 # 通常, 正常情况下, 系统直接启动, 用户无法感知上述界面的存在, 但当出现一些问题时, 我们可能需要进入Shell下进行操作, 如上图中的第二个条目, 选中后回车进入下图界面: 4.1. 显示启动设备 # 正常情况下， 进入Shell后仍然会提示启动相关的设备, 如上图, 倘若由于操作过多, 或者显示bug等, 我们还想再次看到相关的显示, 则需要通过map命令再次显示，如下图：\n可以看到, 其实和默认进入Shell的打印是一样的, 不过为了防止打印被冲刷掉, 还是要会一下.\n4.2. 进入设备及查看文件 # 看上图, 图中黄色字体, FS0: , BLK0:等, 可以理解为不同设备的重命名, 其中FS开头的标识表示该设备的文件系统可以识别, BLK开头的表示表示该设备不存在文件系统, 或者文件系统不可识别. 总之对我们有意义的就只有FS开头的标识.\n只有含有文件系统的设备我们才能访问, 所以UEFI下需要访问的GRUB, 内核等EFI文件一定是放在UEFI下能够识别的文件系统中的. 也就是FS开头的设备.\n如何访问文件系统中的文件呢, 先看下图:\n进入设备时比较特殊, 输入FS0:即可,不能是cd FS0:, 也不能不加后面的冒号.\n进入设备之后就和linux的操作很类似了, 使用cd, ls即可.\n然后ls看到的緑色显示的文件, 也就是UEFI下的可执行文件\u0026ndash;EFI文件. 运行时也无需像linux那样在前面加路径才能执行, UEFI下直接输入文件名即可.\n哦, 值得一提, UEFI下可以通过Tab键实现文件名补全.\n4.3. UEFI下的其他操作 # 如第一节的内容, UEFI下的界面下通常会有很多选项, 其中用户比较关心的选项大概有:\n快速启动: 忽略部分设备初始化, 启动速度加快, 比如x86部分机器需要关闭此选项才能更改启动顺序, 选择系统安装盘. 安全启动: 开启安全校验, 部分外插设备未经过校验可能无法识别, 所以x86装机时可能也需要关闭此项, 防止U盘无法识别. 传统模式: 通常是用于兼容很久的系统启动. 比如龙芯的机器开启传统模式可以安装旧世界系统, 关闭则安装新世界系统, x86下可能叫CSM\u0026hellip;, 开启则可以引导MBR分区的硬盘, 关闭则引导GPT格式硬盘. 高级选项:一些高级的功能开关, 普通用户可能不需要使用, 比如上述传统模式, 龙芯的机器将其放在了高级选项中, 英文是LegacyMode, (看不懂这种英文的同学自我PUA一下). 其他如有需求请在工程师指导下使用. 4.4. UEFI下的一些Shell命令 # 比如pci命令, 具体可以通过pci -?查看具体使用方法, 这里不详细演示.\n常用的命令有:cd, ls, map, pci, mm, dmem, ifconfig, edit, vers等.\n5. UEFI下更新固件方法 # 还有spi命令不得不单独强调, 一个产品往往需要保持更新才能更好的满足用户的需求. 固件是尤其重要的一点.\n当我们需要更新固件(UEFI和PMON都是固件)时, 在Shell下找到文件后, 通过spi -u filename的命令, 即可完成固件更新.\n当然图形界面下也有相关接口, 可以自己理解一下英文再操作.\nGRUB # GRUB界面 # 如图, GRUB界面下列出了几个选项, 其中第一项vm.mxd是我自己加的内核, 第二项Loongnix GNU/Linux是系统自带内核, 第三项Advanced options for Loongnix GNU/Linux是高级选项, 通常包含一些恢复模式的选项, 第四项是System Setup\u0026ndash;系统设置, 其实就是进入UEFI Setup界面.\n然后在界面的最下方:\nUse the ^ and v keys to select which entry is highlighted.\nPress enter to boot the selected OS, e to edit the commands before booting or c for a command-line.\n翻译一下:\n通过按上下键选择选项, 按执行进入选项, 按e去编辑选项, 按c进入GRUB的命令行.\n1. 编辑GRUB选项 # 通常我们通过UEFI执行GRUB的efi文件即可进入GRUB界面, 然后回车便可以启动内核, 但是倘若内核无法正常启动, 我们需要加串口调试, 就需要我们按e去编辑选项, 比如增加串口或者进入单用户模式等.\n按e后进入下图, 我们可以将光标通过上下左右按键, 移动至linux开头的那一行, 并在行末加入想要的参数比如串口console=ttyS0,115200 earlycon=uart,mmio,0x1fe001e0.\n可以看到, 界面最下面仍然有一些文字, 告诉我们按下Ctrl-X组合键或者F10可以直接启动, 按下Ctrl-c或F2进入到GRUB命令行, 按下ESC可以退回上一步.\n2. 手动找grub.cfg # 当我们在UEFI下执行GRUB的efi文件后, 加入grub.cfg的路径有问题, 则需要我们手动找到grub.cfg并且加载:\n逐个说明上述命令: 首先ls命令能够看到当前能够识别的设别, 其中hd0表示一块硬盘(Hard Disk0), 如果有多个硬盘将以hdx的形式显示.\n但是hd0并不具有文件系统, (hd0,msdos2)这种形式才表示有文件系统, msdos指MBR的分区格式, msdos2也就表示MBR硬盘上第二个分区.\n然后逐级用ls命令找到grub.cfg的路径:(hd0,msdos2)/boot/grub/grub.cfg.\n最后通过configfile命令, 解析grub.cfg文件, 即可重新回到GRUB的主界面.\n3. 没有grub.cfg怎么办? # 有时候, 我们会遇到有grub, 但是没有grub.cfg的情况, 这时, 我们可以稍微背下来两条命令, 这两条也就是grub.cfg中加载内核和加载initrd的命令: linux命令和initrd命令\nlinux命令后面加内核的路径, 以及内核启动参数\ninitrd命令后面加initrd的路径即可.\n然后执行boot即可启动. 如下图:\n"},{"id":8,"href":"/applications/ejtag/","title":"龙芯lajtag常用技巧","section":"Applications","content":"cd /tmp/ejtag-debug/ ./la_ejtag_debug_gpio -t source configs/configs.ls3a5000 cpus 查看pc\nset 查看通用寄存器及部分csr寄存器, 此时pc停在set时运行的地址.\ncont 从set处继续运行\nhb addr; cont 断点到addr处, 等待触发断点.\nhbls 查看断点\nwatch data; cont 检测通用寄存器, 当通用寄存器中和data一致时, 断点此处.\nwatchls 查看数据检测点.\nwatch data mask; cont 检测通用寄存器, 当通用寄存器中和data一致时, 断点此处. mask可以设置掩码.\nd1/d4/d8 addr length 按照1字节, 4字节, 8字节, 依次dump length个addr寄存器中的值.\nm1/m4/m8 addr data1 data2\u0026hellip; 按照1字节, 4字节, 8字节, 依次将dataX 写入addr地址.\ndisas addr length 反汇编addr处开始length长的内容.\ncsrs d8 num length 从第num个csr寄存器连续读出length个值.\ncsrs m8 num data 向第num个csr寄存器写入data.\ngdbserver\nspi_program_flash\n"},{"id":9,"href":"/system/kernel/","title":"内核编译","section":"Systems","content":" 龙芯内核编译 # 目前龙芯已经由MIPS架构转战LoongArch架构.\nvmlinux+vmlinuz libmodules RamDisk_initrd 准备阶段 # 下面以LoongArch架构的编译为例. 编译器采用Gcc交叉编译LoongArch版本\n编译器版本 : loongarch64-linux-gnu-gcc-8.3.0 配置文件 采用龙芯默认配置: cp arch/loongarch/configs/loongson3_defconfig .config 开始编译 # vmlinux/vmlinuz\n执行 make ARCH=loongarch CROSS_COMPILE=/opt/LoongArch_Toolchains/loongarch64-linux-gnu-2020-11-06/bin/loongarch64-linux-gnu-(此为编译器路径 which gcc) menuconfig 进入图形化配置界面,开关相关功能,我们直接Esc退出.\n执行 make ARCH=loongarch CROSS_COMPILE=/opt/LoongArch_Toolchains/loongarch64-linux-gnu-2020-11-06/bin/loongarch64-linux-gnu- -j 16 //采用16线程进行编译(目前我是在服务器上编译,核数较多). 到此vmlinux/vmlinuz 非压缩和压缩版内核就编译完成. System.map 是符号表\n执行 make modules_install INSTALL_MOD_PATH=./ ARCH=loongarch CROSS_COMPILE=/opt/LoongArch_Toolchains/loongarch64-linux-gnu-2020-11-06/bin/loongarch64-linux-gnu- 编译lib/modules/ 驱动模块包,熟悉内核的人都了解,当配置menuconfig的时候,会将M的驱动以modules的形式在内核中加载. 将编译的文件进行使用 # 1.vmlinuz 放在os的/boot/下,并可以修改成自己喜欢的名字 vmlinuz_go\n2.将lib/modules/下的文件copy到os根目录/lib/modules/\n3.参考Deebian制作Ramdisk为例: 执行 使用draut进行制作,该脚本制作的Ramdisk支持了好几种文件系统,你可以简单制作RamDisk,这里就不详细介绍该命令了.将制作的*.img文件拷贝到/boot下.\ndracut 是一个事件驱动的 initramfs 基础设施。dracut(工具)被用来通过拷贝工具和文件，从一个已经安装的系统创建一个 initramfs 镜像，并将镜像与dracut框架结合在一起。\n4.修改grub引导程序,进行加载相应的内核和RamDisk.\n目前 grub在Deebian系统的目录: /boot/efi/boot/grub.cfg 修改linux命令加载的文件名-\u0026gt; vmlinuz_go initrd命令加载的文件名-\u0026gt; initrd.live "},{"id":10,"href":"/firmware/firmware/","title":"如何更新固件","section":"Firmware","content":" 在PMON下更新固件 # 详情 PMON使用方法\n从硬盘加载:\nPMON\u0026gt; fload /dev/fs/usb0a/gz.mxd Loading file: /dev/fs/fat@usb0a/gz.mxd dl_offset 900000000f800000 addr 900000000f800000 (bin) - Loaded 993222 bytes Programming flash 900000000f800000:f27c6 into 800000001c000000 Erase end! -Programming end! 从tftp服务器加载:\nPMON\u0026gt; fload tftp://192.168.1.4/gz.mxd Loading file: tftp://192.168.1.4/gz.mxd dl_offset 900000000f800000 addr 900000000f800000 (bin) - Loaded 993222 bytes Programming flash 900000000f800000:f27c6 into 800000001c000000 Erase end! -Programming end! 从http服务器加载:\nPMON\u0026gt; fload http://192.168.1.4/gz.mxd Loading file: http://192.168.1.4/gz.mxd dl_offset 900000000f800000 addr 900000000f800000 (bin) - Loaded 993222 bytes Programming flash 900000000f800000:f27c6 into 800000001c000000 Erase end! -Programming end! 在UEFI下更新固件 # 详情 uefi使用方法\nUEFI Interactive Shell v2.2 EDK II UEFI v2.70 (EDK II, 0x00010000) Mapping table FS0: Alias(s):HD0c0:;BLK0: PciRoot(0x0)/Pci(0x19,0x0)/USB(0x2,0x0) Press ESC in 5 seconds to skip startup.nsh or any other key to continue. Shell\u0026gt; FS0: FSOpen: Open \u0026#39;\\\u0026#39; Success FS0:\\\u0026gt; ls Directory of: FS0:\\ 10/17/2023 07:47 4,194,304 uefi.mxd 1 File(s) 4,194,304 bytes 0 Dir(s) FSOpen: Open \u0026#39;\\\u0026#39; Success FS0:\\\u0026gt; spi -u uefi.mxd Erase : ****************************************************************************************** **************************************************************************************************** ****************************************************************** Erase OK. Program : ****************************************************************************************** **************************************************************************************************** ****************************************************************** Program OK. FS0:\\\u0026gt; 在系统下更新固件 # root@loongson-pc:/home/loongson# git clone https://github.com/MarsDoge/OsTools.git root@loongson-pc:/home/loongson# cd OsTools root@loongson-pc:/home/loongson# ./build.sh root@loongson-pc:/home/loongson/OsTools# ./OsTools spi -u -f uefi.mxd mmap addr start : 0xfff78bc1f0 ------------Read Buf Get Success!----------- Erase : [========================================================================] 100% Program : [========================================================================] 100% --------------Release mem Map---------------- root@loongson-pc:/home/loongson/OsTools# reboot 在系统下备份当前固件 # root@loongson-pc:/home/loongson# git clone https://github.com/MarsDoge/OsTools.git root@loongson-pc:/home/loongson# cd OsTools root@loongson-pc:/home/loongson# ./build.sh root@loongson-pc:/home/loongson# ./OsTools spi -d -f backup.dump.fd mmap addr start : 0x7ffff07fc1f0 --------------Release mem Map---------------- root@loongson-pc:/home/loongson# ls backup.dump.fd backup.dump.fd "},{"id":11,"href":"/system/update_system/","title":"如何更新系统","section":"Systems","content":" 1 全系统更新: # Debian系:\napt update \u0026amp;\u0026amp; apt upgrade Redhat系:\nyum update Arch系:\npacman -Syu 2. 单独更新内核 # 2.1 更新自己编译的内核 # 将内核放置/boot下即可(通常/boot是grub.cfg默认指定的根目录)\n更新完记得更新grub.cfg, 见第四节.\n2.2 更新软件源上的内核 # 以Debian系为例, 其余不做演示:\nroot@loongson-pc:/home/loongson# apt-cache search linux-header aufs-dkms - DKMS files to build and install aufs linux-headers-4.19.0-17-common - Common header files for Linux 4.19 linux-headers-4.19.0-17-loongson-3 - Linux kernel headers for 4.19 on loongson-3 linux-headers-4.19.0-18-common - Common header files for Linux 4.19 linux-headers-4.19.0-18-loongson-3 - Linux kernel headers for 4.19 on loongson-3 linux-headers-4.19.0-19-common - Common header files for Linux 4.19 linux-headers-4.19.0-19-loongson-3 - Linux kernel headers for 4.19 on loongson-3 linux-headers-loongson-3 - Linux kernel headers for 4.19 on loongson-3 (meta-package) root@loongson-pc:/home/loongson# root@loongson-pc:/home/loongson# apt install linux-headers-4.19.0-19-loongson-3 正在读取软件包列表... 完成正在分析软件包的依赖关系树 正在读取状态信息... 完成 ...... ...... 3. 单独更新initrd # 3.1 更新自己编译的modules并生成initrd # 将从内核源码编译的模块文件拷贝至/lib/modules/, 比如4.19.190+.tgz是模块文件的压缩包:\nroot@loongson-pc:/lib/modules# tar -zxf 4.19.190+.tgz -C /lib/modules/ root@loongson-pc:/lib/modules# ls 4.19.0-19-loongson-3 4.19.190+ 在/lib/modules/下生成的4.19.190+文件夹即为新的模块文件目录, 然后手动生成initrd即可. (通常, 模块文件夹名与内核版本名称一致, 倘若不一致, 需要进入/lib/modules/目录, 相当于指定文件夹)\nroot@loongson-pc:/lib/modules# cd /lib/modules/ root@loongson-pc:/lib/modules# dracut --force --kver 4.19.190+ dracut: Executing: /usr/bin/dracut --force --kver 4.19.190+ Mode: real Method: sha256 Files: 1034 Linked: 188 files Compared: 0 xattrs Compared: 2322 files Saved: 7.64 MiB Duration: 0.088150 seconds dracut: *** Hardlinking files done *** dracut: *** Stripping files *** dracut: *** Stripping files done *** dracut: *** Generating early-microcode cpio image *** dracut: *** Store current command line parameters *** dracut: Stored kernel commandline: dracut: resume=UUID=e7429117-dba5-4318-8d48-ab34b7919f6d dracut: root=UUID=103a31fa-631b-4ec5-8295-0817394b36d6 rootfstype=xfs rootflags=rw,noatime,attr2,inode64,noquota dracut: *** Creating image file \u0026#39;/boot/initramfs-4.19.190+.img\u0026#39; *** dracut: *** Creating initramfs image file \u0026#39;/boot/initramfs-4.19.190+.img\u0026#39; done *** /boot/initramfs-4.19.190+.img即为生成的initrd\nmkinitramfs等其他命令不再介绍, 可参考: 生成系统下的一些文件\n3.2 更新软件源上的initrd # 以Debian系为例, 其余不做演示:\nroot@loongson-pc:/lib/modules# apt-cache search linux-image linux-image-4.19.0-17-loongson-3 - Linux kernel, version 4.19 for loongson 3 linux-image-4.19.0-17-loongson-3-dbg - Debug symbols for linux-image-4.19.0-17-loongson-3 linux-image-4.19.0-17-loongson-3-kdump - kdump package linux-image-4.19.0-18-loongson-3 - Linux kernel, version 4.19 for loongson 3 linux-image-4.19.0-18-loongson-3-dbg - Debug symbols for linux-image-4.19.0-18-loongson-3 linux-image-4.19.0-18-loongson-3-kdump - kdump package linux-image-4.19.0-19-loongson-3 - Linux kernel, version 4.19 for loongson 3 linux-image-4.19.0-19-loongson-3-dbg - Debug symbols for linux-image-4.19.0-19-loongson-3 linux-image-4.19.0-19-loongson-3-kdump - kdump package linux-image-loongson-3 - Linux for Loongson 3 (meta-package) linux-image-loongson-3-dbg - Debugging symbols for Linux loongson-3 configuration (meta-package) root@loongson-pc:/lib/modules# apt install linux-image-4.19.0-19-loongson-3 正在读取软件包列表... 完成正在分析软件包的依赖关系树 正在读取状态信息... 完成 ...... ...... 4. 更新grub.cfg # 内核和initrd准备完毕后, 可以增加或修改相应的启动项. 例如vm.mxd是手动编译生成的内核名称. initramfs-4.19.190+.img是根据modules生成的initrd, 增加或者修改相应内容即可:\nmenuentry \u0026#39;vm.mxd\u0026#39; --class loongnix_20 --class gnu-linux --class gnu --class os $menuentry_id_option \u0026#39;gnulinux-simple-103a31fa-631b-4ec5-8295-0817394b36d6\u0026#39; { load_video gfxmode $linux_gfx_mode insmod gzio if [ x$grub_platform = xxen ]; then insmod xzio; insmod lzopio; fi insmod part_gpt insmod ext2 set root=\u0026#39;hd0,gpt2\u0026#39; if [ x$feature_platform_search_hint = xy ]; then search --no-floppy --fs-uuid --set=root --hint-ieee1275=\u0026#39;ieee1275//disk@0,gpt2\u0026#39; --hint-bios=hd0,gpt2 --hint-efi=hd0,gpt2 --hint-baremetal=ahci0,gpt2 6a68fa6e-4fa3-4036-91a3-6f0b2e6ff1b4 else search --no-floppy --fs-uuid --set=root 6a68fa6e-4fa3-4036-91a3-6f0b2e6ff1b4 fi echo \u0026#39;Loading Linux 4.19.0-19-loongson-3 ...\u0026#39; linux /vm.mxd root=UUID=103a31fa-631b-4ec5-8295-0817394b36d6 ro console=ttyS0,115200 earlycon=uart,mmio,0x1fe001e0 splash resume=PARTUUID=5bb18f47-7756-4be9-b5c0-59d1f1d36fed echo \u0026#39;Loading initial ramdisk ...\u0026#39; initrd /initramfs-4.19.190+.img } "},{"id":12,"href":"/system/gen_sys_file/","title":"生成系统下的一些文件","section":"Systems","content":" 1. Initrd # 通常, lib/modules/下的文件夹名称和内核的版本名是一致的, 所以可以通过下列命令生成Initrd:\n1.1 dracut命令 # ls lib/modules/* | xargs -I N dracut --kver N --force 1.2 mkinitramfs命令 # ls lib/modules/* | xargs -I N mkinitramfs /lib/modules/N -o /boot/initrd.img-N 2. GRUB # 2.1 Grub # 通常, Grub安装在当前启动系统所在的磁盘上, 如下命令可以找到当前磁盘. (希望将Grub安装在其他盘的同学, 看明白自己想要的效果)\n[root@mxd ~]# lsblk -P | grep \u0026#34;$(lsblk -P | grep -w \u0026#39;MOUNTPOINTS=\u0026#34;/\u0026#34;\u0026#39; | sed \u0026#39;s/.*MAJ:MIN=\u0026#34;\\([^:]*\\).*/\\1/g\u0026#39;):0\u0026#34; | awk -F \u0026#39;\u0026#34;\u0026#39; \u0026#39;{print \u0026#34;/dev/\u0026#34; $2}\u0026#39; /dev/nvme0n1 再通过grub-install或者grub2-install命令安装进磁盘:\ngrub-install /dev/nvme0n1 2.2 grub.cfg # grub-mkconfig -o /boot/grub/grub.cfg 2.3 grub.efi # grub-mkimage -c /boot/grub/grub.cfg -o /boot/efi/EFI/BOOT/BOOTLOONGARCH64.EFI -O loongarch64-efi 2.1节中生成grub可以让bios找到启动设备, 自动启动.\n假如没有执行2.1中的内容, 用户可以在UEFI下通过手动执行此节命令中生成的BOOTLOONGARCH64.EFI加载grub程序.\n3. fstab # 系统启动后, 启动参数中的root=后面的内容将被挂载为根文件系统, 也就是Linux目录中的/分区, 而其他的目录的挂载依赖/etc/fstab中的描述, 倘若重新分区, 通常需要更新/etc/fstab中的内容. 里面的内容具体含义详情 https://www.bing.com/\n3.1 自动更新 # 自动更新的前提是对应目录已经按照预设想法挂载, 比如:\n[root@mxd ~]# lsblk NAME MAJ:MIN RM SIZE RO TYPE MOUNTPOINTS sda 8:0 0 238.5G 0 disk ├─sda1 8:1 0 300M 0 part /boot/efi ├─sda2 8:2 0 300M 0 part /boot ├─sda3 8:3 0 41.3G 0 part / ├─sda4 8:4 0 41.3G 0 part ├─sda5 8:5 0 146.5G 0 part /root │ /opt │ /home │ /var │ /data └─sda6 8:6 0 8.8G 0 part [SWAP] 然后使用github上开源的genfstab工具生成:\n[root@mxd ~]# git clone https://github.com/glacion/genfstab.git 正克隆到 \u0026#39;genfstab\u0026#39;... remote: Enumerating objects: 14, done. remote: Counting objects: 100% (3/3), done. remote: Compressing objects: 100% (3/3), done. remote: Total 14 (delta 0), reused 1 (delta 0), pack-reused 11 接收对象中: 100% (14/14), 29.18 KiB | 281.00 KiB/s, 完成. 处理 delta 中: 100% (2/2), 完成. [root@mxd ~]# cd genfstab/ [root@mxd ~ genfstab]# ./genfstab -U \u0026gt; /etc/fstab 同样, 假如在制作非当前启动系统的fstab文件, 例如:\n[root@mxd ~]# lsblk NAME MAJ:MIN RM SIZE RO TYPE MOUNTPOINTS sda 8:0 0 238.5G 0 disk ├─sda1 8:1 0 300M 0 part /mnt/boot/efi ├─sda2 8:2 0 300M 0 part /mnt/boot ├─sda3 8:3 0 82.6G 0 part /mnt ├─sda4 8:5 0 146.5G 0 part /mnt/home └─sda5 8:6 0 8.8G 0 part [SWAP] 也同样可以使用:\n[root@mxd ~ genfstab]# ./genfstab -U \u0026gt; /mnt/etc/fstab 3.2 手动更新 # 同样, 假如在制作非当前启动系统的fstab文件, 例如:\n[root@mxd ~]# lsblk NAME MAJ:MIN RM SIZE RO TYPE MOUNTPOINTS sda 8:0 0 238.5G 0 disk ├─sda1 8:1 0 300M 0 part /mnt/boot/efi ├─sda2 8:2 0 300M 0 part /mnt/boot ├─sda3 8:3 0 82.6G 0 part /mnt ├─sda4 8:5 0 146.5G 0 part /mnt/home └─sda5 8:6 0 8.8G 0 part [SWAP] [root@mxd ~]# blkid /dev/sda2: LABEL=\u0026#34;bootfs\u0026#34; UUID=\u0026#34;6a68fa6e-4fa3-4036-91a3-6f0b2e6ff1b4\u0026#34; BLOCK_SIZE=\u0026#34;1024\u0026#34; TYPE=\u0026#34;ext3\u0026#34; PARTUUID=\u0026#34;2215dfd8\u0026#34; /dev/sda4: LABEL=\u0026#34;datafs\u0026#34; UUID=\u0026#34;b4e5345f-171e-447c-8b89-52459b29a380\u0026#34; BLOCK_SIZE=\u0026#34;512\u0026#34; TYPE=\u0026#34;xfs\u0026#34; PARTUUID=\u0026#34;0ba0e5ea-a\u0026#34; /dev/sda3: LABEL=\u0026#34;rootfs\u0026#34; UUID=\u0026#34;103a31fa-631b-4ec5-8295-0817394b36d6\u0026#34; BLOCK_SIZE=\u0026#34;512\u0026#34; TYPE=\u0026#34;xfs\u0026#34; PARTUUID=\u0026#34;687bdb73-3\u0026#34; /dev/sda1: UUID=\u0026#34;768C-0E8F\u0026#34; BLOCK_SIZE=\u0026#34;512\u0026#34; TYPE=\u0026#34;vfat\u0026#34; PARTUUID=\u0026#34;bbb4bdad-36d3-4300-872c-1c00b15588c2\u0026#34; /dev/sda5: UUID=\u0026#34;e7429117-dba5-4318-8d48-ab34b7919f6d\u0026#34; TYPE=\u0026#34;swap\u0026#34; PARTUUID=\u0026#34;5bb18f47-7756-4be9-b5c0-59d1f1d36fed\u0026#34; 只需要将对应分区的UUID填写到/mnt/etc/fstab中去.\n第一列是UUID, 或者理解是挂载的来源\n第二列是挂载的目标位置\n第三列是挂载的类型\n第四列是挂载的参数\n[root@mxd ~]# cat /mnt/etc/fstab # /etc/fstab: static file system information. # # Use \u0026#39;blkid\u0026#39; to print the universally unique identifier for a device; this may # be used with UUID= as a more robust way to name devices that works even if # disks are added and removed. See fstab(5). # # \u0026lt;file system\u0026gt; \u0026lt;mount point\u0026gt; \u0026lt;type\u0026gt; \u0026lt;options\u0026gt; \u0026lt;dump\u0026gt; \u0026lt;pass\u0026gt; UUID=768C-0E8F /boot/efi vfat defaults,noatime 0 2 UUID=6a68fa6e-4fa3-4036-91a3-6f0b2e6ff1b4 /boot ext3 defaults,noatime 0 2 UUID=103a31fa-631b-4ec5-8295-0817394b36d6 / xfs defaults,noatime,discard 0 1 UUID=b4e5345f-171e-447c-8b89-52459b29a380 /home xfs defaults,noatime,discard 0 2 UUID=e7429117-dba5-4318-8d48-ab34b7919f6d swap swap defaults,noatime 0 2 tmpfs /tmp tmpfs defaults,noatime,mode=1777 0 0 其中第四列挂载的参数可以参考mount -v的输出, 不清楚的抄一抄上述内容, 基本是可用的.\n4. 生成用户 # 其实是创建用户, 任何系统都需要一个可登录的用户来操作, 那么则必须配置一个用户作为登录选项.\n开发中常用root帐号通常是自带的, 但是我们需要对其设定密码, 通过passwd root命令.\n如果我们需要普通用户, 则需要通过useradd命令创建:\n[root@mxd ~]# useradd -m -s /bin/bash username [root@mxd ~]# passwd username 新的密码： 重新输入新的密码： passwd：已成功更新密码 通常, 上述内容是制作一个操作系统最基本的内容(个人理解, 非专业说明).\n"},{"id":13,"href":"/system/systeminfo/","title":"系统下查看一些信息","section":"Systems","content":" 1. 查看系统版本 # [root@mxd mxd]# cat /etc/os-release NAME=\u0026#34;Arch Linux\u0026#34; PRETTY_NAME=\u0026#34;Arch Linux\u0026#34; ID=arch BUILD_ID=rolling ANSI_COLOR=\u0026#34;38;2;23;147;209\u0026#34; HOME_URL=\u0026#34;https://archlinux.org/\u0026#34; DOCUMENTATION_URL=\u0026#34;https://wiki.archlinux.org/\u0026#34; SUPPORT_URL=\u0026#34;https://bbs.archlinux.org/\u0026#34; BUG_REPORT_URL=\u0026#34;https://bugs.archlinux.org/\u0026#34; PRIVACY_POLICY_URL=\u0026#34;https://terms.archlinux.org/docs/privacy-policy/\u0026#34; LOGO=archlinux-logo 2. 查看内核版本 # [root@mxd mxd]# uname -a Linux mxd 6.5.0-4 #1 SMP PREEMPT Thu, 31 Aug 2023 09:38:08 +0000 loongarch64 GNU/Linux 3. 查看固件版本 # [root@mxd mxd]# cat /sys/firmware/loongson/boardinfo BIOS Information Vendor\t: Loongson Version\t: Loongson-UDK2018-V4.0.05494-stable202305 ROM Size\t: 4096 KB Release Date\t: 07/10/23 18:05:47 Board Information Manufacturer\t: Loongson Board Name\t: Loongson-LS3A6000-7A2000-1w-EVB-V1.21 Family\t: LOONGSON64 4. 查看ip # [root@mxd mxd]# ip a 1: lo: \u0026lt;LOOPBACK,UP,LOWER_UP\u0026gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000 link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00 inet 127.0.0.1/8 scope host lo valid_lft forever preferred_lft forever inet6 ::1/128 scope host noprefixroute valid_lft forever preferred_lft forever 2: enp0s3f0: \u0026lt;NO-CARRIER,BROADCAST,MULTICAST,UP\u0026gt; mtu 1500 qdisc mq state DOWN group default qlen 1000 link/ether 00:55:7b:b5:7d:f7 brd ff:ff:ff:ff:ff:ff 3: enp2s0: \u0026lt;BROADCAST,MULTICAST,UP,LOWER_UP\u0026gt; mtu 1500 qdisc fq_codel state UP group default qlen 1000 link/ether ce:38:b3:df:3b:23 brd ff:ff:ff:ff:ff:ff inet 192.168.1.13/23 brd 192.168.1.255 scope global dynamic noprefixroute enp2s0 valid_lft 40218sec preferred_lft 40218sec inet6 fe80::80b6:e9f0:ab6c:e9c5/64 scope link noprefixroute valid_lft forever preferred_lft forever 4: docker0: \u0026lt;NO-CARRIER,BROADCAST,MULTICAST,UP\u0026gt; mtu 1500 qdisc noqueue state DOWN group default link/ether 02:42:4e:12:01:c7 brd ff:ff:ff:ff:ff:ff inet 172.18.0.1/16 brd 172.18.255.255 scope global docker0 valid_lft forever preferred_lft forever 5. 查看pci设备 # [root@mxd mxd]# lspci 00:00.0 Host bridge: Loongson Technology LLC Hyper Transport Bridge Controller 00:00.1 Host bridge: Loongson Technology LLC Hyper Transport Bridge Controller (rev 01) 00:00.2 Host bridge: Loongson Technology LLC Device 7a20 (rev 01) 00:00.3 Host bridge: Loongson Technology LLC Device 7a30 00:03.0 Ethernet controller: Loongson Technology LLC Device 7a13 00:04.0 USB controller: Loongson Technology LLC OHCI USB Controller (rev 02) 00:04.1 USB controller: Loongson Technology LLC EHCI USB Controller (rev 02) 00:05.0 USB controller: Loongson Technology LLC OHCI USB Controller (rev 02) 00:05.1 USB controller: Loongson Technology LLC EHCI USB Controller (rev 02) 00:06.0 Multimedia video controller: Loongson Technology LLC Device 7a25 (rev 01) 00:06.1 VGA compatible controller: Loongson Technology LLC Device 7a36 (rev 02) 00:06.2 Audio device: Loongson Technology LLC Device 7a37 00:07.0 Audio device: Loongson Technology LLC HDA (High Definition Audio) Controller 00:08.0 SATA controller: Loongson Technology LLC Device 7a18 00:09.0 PCI bridge: Loongson Technology LLC Device 7a49 00:0a.0 PCI bridge: Loongson Technology LLC Device 7a39 00:0b.0 PCI bridge: Loongson Technology LLC Device 7a39 00:0c.0 PCI bridge: Loongson Technology LLC Device 7a39 00:0d.0 PCI bridge: Loongson Technology LLC Device 7a49 00:0f.0 PCI bridge: Loongson Technology LLC Device 7a69 00:10.0 PCI bridge: Loongson Technology LLC Device 7a59 00:13.0 PCI bridge: Loongson Technology LLC Device 7a59 00:16.0 System peripheral: Loongson Technology LLC Device 7a1b 00:19.0 USB controller: Loongson Technology LLC Device 7a34 02:00.0 Ethernet controller: Realtek Semiconductor Co., Ltd. RTL8111/8168/8411 PCI Express Gigabit Ethernet Controller (rev 15) 05:00.0 Non-Volatile memory controller: Shenzhen Longsys Electronics Co., Ltd. SM2263EN/SM2263XT-based OEM SSD (rev 03) 07:00.0 VGA compatible controller: Advanced Micro Devices, Inc. [AMD/ATI] Oland [Radeon HD 8570 / R5 430 OEM / R7 240/340 / Radeon 520 OEM] (rev 87) 07:00.1 Audio device: Advanced Micro Devices, Inc. [AMD/ATI] Oland/Hainan/Cape Verde/Pitcairn HDMI Audio [Radeon HD 7000 Series] 5.1 详细查看某pci设备使用的驱动 # 其中07:00.0是上面左侧显示的一段数字, 根据描述, 07:00.0那一行指一个VGA兼容设备, 换句话说是指显示设备, 业内叫做显卡\n如下, 该显卡使用的驱动是:radeon\n[root@mxd mxd]# lspci -vvv -s 07:00.0 2\u0026gt;/dev/null | grep driver -A 2 Kernel driver in use: radeon 6. 查看系统下某驱动是否加载 # 如下显示:\n第1列：表示模块的名称，如radeon表示radeon模块。\n第2列：表示模块的大小，如1687552表示radeon模块的大小为1687552字节。\n第3列：表示依赖模块的个数，如74表示radeon有74个依赖模块。\n第4列：表示依赖模块的内容, 如drm_suballoc_helper依赖于amdgpu,radeon俩模块\n[root@mxd mxd]# lsmod | grep radeon radeon 1687552 74 drm_suballoc_helper 49152 2 amdgpu,radeon drm_ttm_helper 49152 2 amdgpu,radeon ttm 131072 3 amdgpu,radeon,drm_ttm_helper drm_display_helper 229376 2 amdgpu,radeon drm_kms_helper 229376 5 drm_dma_helper,drm_display_helper,amdgpu,radeon,loongson 7. 查看系统启动log # 当不确定开发人员需要哪些信息时, 请优先将此信息给出.\n[root@mxd mxd]# dmesg [ 2.248064] ATOM BIOS: C57701 [ 2.248176] radeon 0000:07:00.0: VRAM: 2048M 0x0000000000000000 - 0x000000007FFFFFFF (2048M used) [ 2.248179] radeon 0000:07:00.0: GTT: 2048M 0x0000000080000000 - 0x00000000FFFFFFFF [ 2.248180] [drm] Detected VRAM RAM=2048M, BAR=256M [ 2.248182] [drm] RAM width 64bits DDR [ 2.248289] [drm] radeon: 2048M of VRAM memory ready [ 2.248292] [drm] radeon: 2048M of GTT memory ready. [ 2.248300] [drm] Loading oland Microcode [ 2.249595] [drm] Internal thermal controller with fan control [ 2.259143] [drm] radeon: dpm initialized [ 2.261098] [drm] GART: num cpu pages 131072, num gpu pages 524288 [ 2.261845] [drm] PCIE gen 3 link speeds already enabled [ 2.328096] [drm] PCIE GART of 2048M enabled (table at 0x0000000000168000). [ 2.328289] radeon 0000:07:00.0: WB enabled [ 2.328291] radeon 0000:07:00.0: fence driver on ring 0 use gpu addr 0x0000000080000c00 [ 2.328293] radeon 0000:07:00.0: fence driver on ring 1 use gpu addr 0x0000000080000c04 [ 2.328294] radeon 0000:07:00.0: fence driver on ring 2 use gpu addr 0x0000000080000c08 [ 2.328296] radeon 0000:07:00.0: fence driver on ring 3 use gpu addr 0x0000000080000c0c [ 2.328297] radeon 0000:07:00.0: fence driver on ring 4 use gpu addr 0x0000000080000c10 [ 2.343597] radeon 0000:07:00.0: fence driver on ring 5 use gpu addr 0x0000000000075a18 [ 2.343678] radeon 0000:07:00.0: radeon: MSI limited to 32-bit ...... ...... 或:\n[root@mxd mxd]# journalctl -b -0 10月 11 09:16:21 mxd kernel: Linux version 6.5.0-4 (linux@archlinux) (gcc (GCC) 13.2.1 20230801, GNU ld (GNU Binutils)\u0026gt; 10月 11 09:16:21 mxd kernel: 64-bit Loongson Processor probed (LA664 Core) 10月 11 09:16:21 mxd kernel: CPU0 revision is: 0014d000 (Loongson-64bit) 10月 11 09:16:21 mxd kernel: FPU0 revision is: 00000000 10月 11 09:16:21 mxd kernel: efi: EFI v2.7 by EDK II 10月 11 09:16:21 mxd kernel: efi: ACPI 2.0=0xfa3b0000 SMBIOS 3.0=0xfe5b0000 INITRD=0xfa2d0e98 MEMRESERVE=0xfa2d0d98 ME\u0026gt; 10月 11 09:16:21 mxd kernel: ACPI: Early table checksum verification disabled 10月 11 09:16:21 mxd kernel: ACPI: RSDP 0x00000000FA3B0000 000024 (v02 LOONGS) 10月 11 09:16:21 mxd kernel: ACPI: XSDT 0x00000000FA3A0000 000064 (v01 LOONGS LOONGSON 00000002 01000013) 10月 11 09:16:21 mxd kernel: ACPI: FACP 0x00000000FA370000 0000F4 (v03 LOONGS LOONGSON 00000002 LIUX 01000013) 10月 11 09:16:21 mxd kernel: ACPI: DSDT 0x00000000FA340000 002676 (v02 LOONGS LOONGSON 00000002 INTL 20180629) 10月 11 09:16:21 mxd kernel: ACPI: FACS 0x00000000FA380000 000040 10月 11 09:16:21 mxd kernel: ACPI: APIC 0x00000000FA390000 0000FA (v01 LOONGS LOONGSON 00000002 LIUX 01000013) 10月 11 09:16:21 mxd kernel: ACPI: IVRS 0x00000000FA360000 00004C (v01 LARCH LOONGSON 00000001 LIUX 00000001) 10月 11 09:16:21 mxd kernel: ACPI: MCFG 0x00000000FA350000 00003C (v01 LOONGS LOONGSON 00000001 LIUX 01000013) 10月 11 09:16:21 mxd kernel: ACPI: SRAT 0x00000000FA330000 000100 (v02 LOONGS LOONGSON 00000002 LIUX 01000013) 10月 11 09:16:21 mxd kernel: ACPI: SLIT 0x00000000FA320000 00002D (v01 LOONGS LOONGSON 00000002 LIUX 01000013) 10月 11 09:16:21 mxd kernel: ACPI: VIAT 0x00000000FA310000 00002C (v01 LOONGS LOONGSON 00000002 LIUX 01000013) 10月 11 09:16:21 mxd kernel: ACPI: PPTT 0x00000000FA300000 000128 (v03 LOONGS LOONGSON 00000002 LIUX 01000013) ...... ...... 两种打印不一致是因为dmesg命令显示的内容是从2秒开始的, 前面的内容被冲掉了, 而journalctl显示的内容则更完整.\n7.1 查看系统上一次的启动log # [root@mxd mxd]# journalctl -b -1 9月 06 16:19:37 mxd kernel: Linux version 6.5.0-4 (linux@archlinux) (gcc (GCC) 13.2.1 20230801, GNU ld (GNU Binutils) \u0026gt; 9月 06 16:19:37 mxd kernel: 64-bit Loongson Processor probed (LA664 Core) 9月 06 16:19:37 mxd kernel: CPU0 revision is: 0014d000 (Loongson-64bit) 9月 06 16:19:37 mxd kernel: FPU0 revision is: 00000000 9月 06 16:19:37 mxd kernel: efi: EFI v2.7 by EDK II 9月 06 16:19:37 mxd kernel: efi: ACPI 2.0=0xfa3b0000 SMBIOS 3.0=0xfe5b0000 INITRD=0xfa2d0e98 MEMRESERVE=0xfa2d0d18 MEM\u0026gt; 9月 06 16:19:37 mxd kernel: ACPI: Early table checksum verification disabled 9月 06 16:19:37 mxd kernel: ACPI: RSDP 0x00000000FA3B0000 000024 (v02 LOONGS) 9月 06 16:19:37 mxd kernel: ACPI: XSDT 0x00000000FA3A0000 000064 (v01 LOONGS LOONGSON 00000002 01000013) 9月 06 16:19:37 mxd kernel: ACPI: FACP 0x00000000FA370000 0000F4 (v03 LOONGS LOONGSON 00000002 LIUX 01000013) 9月 06 16:19:37 mxd kernel: ACPI: DSDT 0x00000000FA340000 002676 (v02 LOONGS LOONGSON 00000002 INTL 20180629) 9月 06 16:19:37 mxd kernel: ACPI: FACS 0x00000000FA380000 000040 9月 06 16:19:37 mxd kernel: ACPI: APIC 0x00000000FA390000 0000FA (v01 LOONGS LOONGSON 00000002 LIUX 01000013) 9月 06 16:19:37 mxd kernel: ACPI: IVRS 0x00000000FA360000 00004C (v01 LARCH LOONGSON 00000001 LIUX 00000001) 9月 06 16:19:37 mxd kernel: ACPI: MCFG 0x00000000FA350000 00003C (v01 LOONGS LOONGSON 00000001 LIUX 01000013) 9月 06 16:19:37 mxd kernel: ACPI: SRAT 0x00000000FA330000 000100 (v02 LOONGS LOONGSON 00000002 LIUX 01000013) 9月 06 16:19:37 mxd kernel: ACPI: SLIT 0x00000000FA320000 00002D (v01 LOONGS LOONGSON 00000002 LIUX 01000013) 9月 06 16:19:37 mxd kernel: ACPI: VIAT 0x00000000FA310000 00002C (v01 LOONGS LOONGSON 00000002 LIUX 01000013) 9月 06 16:19:37 mxd kernel: ACPI: PPTT 0x00000000FA300000 000128 (v03 LOONGS LOONGSON 00000002 LIUX 01000013) ...... ...... 8. 查看磁盘挂载信息 # [root@mxd mxd]# lsblk NAME MAJ:MIN RM SIZE RO TYPE MOUNTPOINTS sda 8:0 0 931.5G 0 disk ├─sda1 8:1 0 500M 0 part ├─sda2 8:2 0 1G 0 part ├─sda3 8:3 0 500G 0 part └─sda4 8:4 0 430G 0 part /work nvme0n1 259:0 0 238.5G 0 disk ├─nvme0n1p1 259:1 0 300M 0 part /boot/efi ├─nvme0n1p2 259:2 0 300M 0 part /boot ├─nvme0n1p3 259:3 0 80G 0 part / ├─nvme0n1p4 259:4 0 150.4G 0 part /home └─nvme0n1p5 259:5 0 7.5G 0 part 9. 查看磁盘使用信息 # [root@mxd mxd]# df -h 文件系统 大小 已用 可用 已用% 挂载点 dev 7.9G 0 7.9G 0% /dev run 7.9G 6.2M 7.9G 1% /run efivarfs 59K 14K 46K 23% /sys/firmware/efi/efivars /dev/nvme0n1p3 80G 16G 65G 20% / tmpfs 7.9G 338M 7.6G 5% /dev/shm tmpfs 7.9G 1.9G 6.1G 24% /tmp /dev/nvme0n1p4 150G 99G 52G 66% /home /dev/nvme0n1p2 272M 110M 147M 43% /boot /dev/nvme0n1p1 300M 196K 300M 1% /boot/efi /dev/sda4 430G 22G 408G 6% /work tmpfs 1.6G 608K 1.6G 1% /run/user/1000 10. 查看内存使用情况 # [root@mxd mxd]# free -m total used free shared buff/cache available 内存： 16146 13354 1372 2354 5945 2792 交换： 0 0 0 11. 查看系统某服务运行情况 # 比如NetworkManager服务\n[root@mxd mxd]# systemctl status NetworkManager ● NetworkManager.service - Network Manager Loaded: loaded (/usr/lib/systemd/system/NetworkManager.service; enabled; preset: disabled) Active: active (running) since Wed 2023-10-11 09:16:23 CST; 2 weeks 1 day ago Docs: man:NetworkManager(8) Main PID: 2746 (NetworkManager) Tasks: 4 (limit: 19334) Memory: 10.7M CPU: 8min 57.592s CGroup: /system.slice/NetworkManager.service └─2746 /usr/bin/NetworkManager --no-daemon 10月 26 09:20:04 mxd NetworkManager[2746]: \u0026lt;info\u0026gt; [1698283204.0241] manager: NetworkManager state is now CONNECTED_GL\u0026gt; 10月 26 09:22:31 mxd NetworkManager[2746]: \u0026lt;info\u0026gt; [1698283351.8060] dhcp4 (enp2s0): state changed new lease, address=\u0026gt; 10月 26 09:35:23 mxd NetworkManager[2746]: \u0026lt;info\u0026gt; [1698284123.6465] manager: NetworkManager state is now CONNECTED_SI\u0026gt; 10月 26 09:39:39 mxd NetworkManager[2746]: \u0026lt;info\u0026gt; [1698284379.0202] manager: NetworkManager state is now CONNECTED_GL\u0026gt; 10月 26 09:49:58 mxd NetworkManager[2746]: \u0026lt;info\u0026gt; [1698284998.6470] manager: NetworkManager state is now CONNECTED_SI\u0026gt; 10月 26 09:54:14 mxd NetworkManager[2746]: \u0026lt;info\u0026gt; [1698285254.0105] manager: NetworkManager state is now CONNECTED_GL\u0026gt; 10月 26 10:04:33 mxd NetworkManager[2746]: \u0026lt;info\u0026gt; [1698285873.6467] manager: NetworkManager state is now CONNECTED_SI\u0026gt; 10月 26 10:05:06 mxd NetworkManager[2746]: \u0026lt;info\u0026gt; [1698285906.0615] manager: NetworkManager state is now CONNECTED_GL\u0026gt; 11.1 查看某服务的运行log # 比如NetworkManager服务\n[root@mxd mxd]# journalctl -b -u NetworkManager 10月 11 09:16:23 mxd systemd[1]: Starting Network Manager... 10月 11 09:16:23 mxd NetworkManager[2746]: \u0026lt;info\u0026gt; [1696986983.3066] NetworkManager (version 1.42.6-1) is starting... \u0026gt; 10月 11 09:16:23 mxd NetworkManager[2746]: \u0026lt;info\u0026gt; [1696986983.3069] Read config: /etc/NetworkManager/NetworkManager.c\u0026gt; 10月 11 09:16:23 mxd systemd[1]: Started Network Manager. 10月 11 09:16:23 mxd NetworkManager[2746]: \u0026lt;info\u0026gt; [1696986983.3090] bus-manager: acquired D-Bus service \u0026#34;org.freedesk\u0026gt; 10月 11 09:16:23 mxd NetworkManager[2746]: \u0026lt;info\u0026gt; [1696986983.3143] manager[0x5555767b5ec0]: monitoring kernel firmwa\u0026gt; 10月 11 09:16:23 mxd NetworkManager[2746]: \u0026lt;info\u0026gt; [1696986983.5504] hostname: hostname: using hostnamed 10月 11 09:16:23 mxd NetworkManager[2746]: \u0026lt;info\u0026gt; [1696986983.5505] hostname: static hostname changed from (none) to \u0026gt; 10月 11 09:16:23 mxd NetworkManager[2746]: \u0026lt;info\u0026gt; [1696986983.5509] dns-mgr: init: dns=default,systemd-resolved rc-ma\u0026gt; 10月 11 09:16:23 mxd NetworkManager[2746]: \u0026lt;info\u0026gt; [1696986983.5529] manager[0x5555767b5ec0]: rfkill: Wi-Fi hardware r\u0026gt; 10月 11 09:16:23 mxd NetworkManager[2746]: \u0026lt;info\u0026gt; [1696986983.5529] manager[0x5555767b5ec0]: rfkill: WWAN hardware ra\u0026gt; 10月 11 09:16:23 mxd NetworkManager[2746]: \u0026lt;info\u0026gt; [1696986983.5566] Loaded device plugin: NMAtmManager (/usr/lib/Netw\u0026gt; 10月 11 09:16:23 mxd NetworkManager[2746]: \u0026lt;info\u0026gt; [1696986983.5615] Loaded device plugin: NMBluezManager (/usr/lib/Ne\u0026gt; 10月 11 09:16:23 mxd NetworkManager[2746]: \u0026lt;info\u0026gt; [1696986983.5627] Loaded device plugin: NMOvsFactory (/usr/lib/Netw\u0026gt; 10月 11 09:16:23 mxd NetworkManager[2746]: \u0026lt;info\u0026gt; [1696986983.5831] Loaded device plugin: NMTeamFactory (/usr/lib/Net\u0026gt; 10月 11 09:16:23 mxd NetworkManager[2746]: \u0026lt;info\u0026gt; [1696986983.5842] Loaded device plugin: NMWifiFactory (/usr/lib/Net\u0026gt; 10月 11 09:16:23 mxd NetworkManager[2746]: \u0026lt;info\u0026gt; [1696986983.5849] Loaded device plugin: NMWwanFactory (/usr/lib/Net\u0026gt; 10月 11 09:16:23 mxd NetworkManager[2746]: \u0026lt;info\u0026gt; [1696986983.5851] manager: rfkill: Wi-Fi enabled by radio killswitc\u0026gt; 10月 11 09:16:23 mxd NetworkManager[2746]: \u0026lt;info\u0026gt; [1696986983.5852] manager: rfkill: WWAN enabled by radio killswitch\u0026gt; 10月 11 09:16:23 mxd NetworkManager[2746]: \u0026lt;info\u0026gt; [1696986983.5852] manager: Networking is enabled by state file ...... ...... 12. 查看USB连接信息 # [root@mxd mxd]# lsusb -t /: Bus 06.Port 1: Dev 1, Class=root_hub, Driver=xhci_hcd/4p, 5000M /: Bus 05.Port 1: Dev 1, Class=root_hub, Driver=xhci_hcd/4p, 480M /: Bus 04.Port 1: Dev 1, Class=root_hub, Driver=ohci-pci/4p, 12M |__ Port 2: Dev 7, If 0, Class=Vendor Specific Class, Driver=pl2303, 12M /: Bus 03.Port 1: Dev 1, Class=root_hub, Driver=ehci-pci/4p, 480M |__ Port 1: Dev 103, If 0, Class=Hub, Driver=hub/4p, 480M |__ Port 1: Dev 104, If 0, Class=Human Interface Device, Driver=usbhid, 1.5M |__ Port 3: Dev 105, If 0, Class=Human Interface Device, Driver=usbhid, 1.5M |__ Port 3: Dev 105, If 1, Class=Human Interface Device, Driver=usbhid, 1.5M /: Bus 02.Port 1: Dev 1, Class=root_hub, Driver=ohci-pci/4p, 12M |__ Port 1: Dev 4, If 0, Class=Vendor Specific Class, Driver=pl2303, 12M /: Bus 01.Port 1: Dev 1, Class=root_hub, Driver=ehci-pci/4p, 480M 13. 查看CPU相关信息 # [root@mxd mxd]# lscpu 架构： loongarch64 CPU 运行模式： 32-bit, 64-bit Address sizes: 48 bits physical, 48 bits virtual 字节序： Little Endian CPU: 8 在线 CPU 列表： 0-7 BIOS 厂商 ID： Loongson 型号名称： Loongson-3A6000 BIOS 型号名称： Loongson-3A6000 Not Specified CPU @ 2.5GHz BIOS CPU family: 603 CPU 系列： Loongson-64bit 型号： 0x00 每个核的线程数： 2 每个座的核数： 4 座： 1 BogoMIPS： 5000.00 标记： cpucfg lam ual fpu lsx lasx crc32 complex crypto lvz lbt_x86 lbt_arm lbt_mips Caches (sum of all): L1d: 512 KiB (8 instances) L1i: 512 KiB (8 instances) L2: 2 MiB (8 instances) L3: 16 MiB (1 instance) NUMA: NUMA 节点： 1 NUMA 节点0 CPU： 0-7 以及:\n[root@mxd mxd]# cat /proc/cpuinfo system type\t: generic-loongson-machine processor\t: 0 package\t: 0 core\t: 0 global_id\t: 0 CPU Family\t: Loongson-64bit Model Name\t: Loongson-3A6000 CPU Revision\t: 0x00 FPU Revision\t: 0x00 CPU MHz\t: 2500.00 BogoMIPS\t: 5000.00 TLB Entries\t: 2112 Address Sizes\t: 48 bits physical, 48 bits virtual ISA\t: loongarch32 loongarch64 Features\t: cpucfg lam ual fpu lsx lasx crc32 complex crypto lvz lbt_x86 lbt_arm lbt_mips Hardware Watchpoint\t: yes, iwatch count: 8, dwatch count: 4 ...... ...... 14. 查看SMBIOS详细信息 # [root@mxd mxd]# dmidecode # dmidecode 3.5 Getting SMBIOS data from sysfs. SMBIOS 3.2.0 present. Table at 0xFE5A0000. Handle 0x0000, DMI type 0, 26 bytes BIOS Information Vendor: Loongson Version: Loongson-UDK2018-V4.0.05494-stable202305 Release Date: 07/10/23 18:05:47 ROM Size: 4 MB Characteristics: PCI is supported BIOS is upgradeable Boot from CD is supported Selectable boot is supported BIOS ROM is socketed Serial services are supported (int 14h) USB legacy is supported UEFI is supported BIOS Revision: 4.0 Handle 0x0001, DMI type 1, 27 bytes System Information Manufacturer: Loongson Product Name: Loongson-3A6000-7A2000-1w-V0.1-EVB Version: Not Specified Serial Number: Not Specified UUID: Not Present Wake-up Type: Power Switch SKU Number: Not Specified Family: Not Specified ...... ...... 可以使用-t参数只看某一项信息\n如查看processor信息:\n[root@mxd mxd]# dmidecode -t processor # dmidecode 3.5 Getting SMBIOS data from sysfs. SMBIOS 3.2.0 present. Handle 0x0004, DMI type 4, 48 bytes Processor Information Socket Designation: CPU0 Type: Central Processor Family: \u0026lt;OUT OF SPEC\u0026gt; Manufacturer: Loongson ID: 33 41 36 30 30 30 00 00 Version: Loongson-3A6000 Voltage: Unknown External Clock: Unknown Max Speed: Unknown Current Speed: 2500 MHz Status: Populated, Enabled Upgrade: \u0026lt;OUT OF SPEC\u0026gt; L1 Cache Handle: Not Provided L2 Cache Handle: Not Provided L3 Cache Handle: Not Provided Serial Number: Not Specified Asset Tag: Not Specified Part Number: Not Specified Core Count: 8 Core Enabled: 8 Thread Count: 8 Characteristics: 64-bit capable Multi-Core Hardware Thread 15. 查看媒体文件信息 # [root@mxd video_test]# mediainfo yangman.wav General Complete name : yangman.wav Format : Wave Format settings : PcmWaveformat File size : 43.4 MiB Duration : 3 min 56 s Overall bit rate mode : Constant Overall bit rate : 1 541 kb/s Album : 少年 Track name : 少年 Track name/Position : 1 Performer : 梦然 Director : ÃÎÈ» Genre : pop Recorded date : 2019 Original source form/Name : ÉÙÄê Copyright : 夏星星收藏 Cover : Yes Cover type : Cover (front) Cover MIME : image/jpeg ITRK : 1 iurl : http://user.qzone.qq.com/ Audio Format : PCM Format settings : Little / Signed Codec ID : 1 Duration : 3 min 56 s Bit rate mode : Constant Bit rate : 1 536 kb/s Channel(s) : 2 channels Sampling rate : 48.0 kHz Bit depth : 16 bits Stream size : 43.2 MiB (100%) 16. 查看文件 # 16.1 产看文件类型 # [root@mxd video_test]# file yangman.wav yangman.wav: RIFF (little-endian) data, WAVE audio, Microsoft PCM, 16 bit, stereo 48000 Hz 16.2 查看文件大小 # [root@mxd video_test]# du -sh yangman.wav 44M\tyangman.wav 16.3 查看文件校验码 # 如md5:\n[root@mxd video_test]# md5sum yangman.wav 07c75d425e152d3ef782a8dd4b420ab7 yangman.wav 17. 查看网络端口信息 # [root@mxd video_test]# netstat -tnup | grep 3389 tcp6 0 0 192.168.1.3:3389 192.168.1.4:59708 ESTABLISHED - "}]